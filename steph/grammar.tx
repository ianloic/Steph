Program: Block ;

Block: (bindings*=Binding)* 'return' value=Expression ';' ;

FunctionArgument: name=ID ;
FunctionArguments: FunctionArgument (',' FunctionArgument)* ;
Function: '(' args=FunctionArguments ')' '=>' expr=Expression ;

FunctionCallArguments: Expression (',' Expression)* ;
FunctionCall: name=ID '.' '(' args=FunctionCallArguments ')' ;

Binding: 'let' name=ID '=' value=Expression ';' ;

VariableReference: name=ID ;

Expression: Function | VariableReference | INT | FunctionCall ;